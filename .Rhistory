theme_bw() +
theme(legend.position="none")
p2 = ggplot(df2, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Amb logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 8
for (i in 3:7){
liver[,i] = log(liver[,i])
}
temp_liver = liver[,-c(4,10)]
# Chunk 9
model2 = lm(Total_Protiens~.-Dataset, data = temp_liver); summary(model2)
# Chunk 10
model3 = lm(Total_Protiens~.-Dataset, data = liver); summary(model3)
# Chunk 11
ci = confint(model2)
sum = summary(model2)
resum = as.data.frame(cbind(ci[,1], sum$coefficients[,1],
ci[,2],sum$coefficients[,4]))
resum = round(resum, 3)
colnames(resum) = c("IC-", "Coeficient", "IC+", "p-valor")
resum
# Chunk 12
ggplot(liver, aes(x=Aspartate_Aminotransferase, y=Total_Protiens)) +
geom_point( colour="orange") +
geom_smooth(method="lm", colour = "blue", se=TRUE) +
theme_bw() +
theme(legend.position="none")
# Chunk 13
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
ggplot(liver, aes(x = Alamine_Aminotransferase, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
quins = which(liver$Malaltia==1 & log(liver$Alamine_Aminotransferase)<1.4)
samp = sample(quins, 110)
ggplot(liver[-samp, ], aes(x = log(Alamine_Aminotransferase), y = Malaltia)) +
geom_point(colour="orange") +
geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
liver$Malaltia = liver$Malaltia-1
ggplot(liver, aes(x = log(Alamine_Aminotransferase), y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(liver[-samp,], aes(x = log(Alamine_Aminotransferase), y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
samp = sample(quins, 120)
ggplot(liver[-samp, ], aes(x = log(Alamine_Aminotransferase), y = Malaltia)) +
geom_point(colour="orange") +
geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
liver$Malaltia = liver$Malaltia-1
ggplot(liver[-samp,], aes(x = log(Alamine_Aminotransferase), y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
liver$Malaltia = liver$Malaltia-1
ggplot(liver[-samp,], aes(x = log(Alamine_Aminotransferase), y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
model4 = glm(Malaltia~., data=temp_liver, family="binomial");summary(model4)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
set.seed(2502)
require(ggplot2)
require(gridExtra)
# Chunk 2
a = seq(length=100, from=-10, to=10)
b = a + rnorm(100)
c = 5*a + -8*a^2 + a^3  + 40*rnorm(100)
par(mfrow=c(1,2)) # això serveix per poder tenir dues imatges costat per costat
plot(a,b, main = "Model regressió lineal")
plot(a, c, main = "Model regressió no lineal")
# Chunk 3
x = rnorm(100)
y = rnorm(100)
df = as.data.frame(cbind(x,y))
df$dist = x^2+y^2
df$colour = as.factor(ifelse(df$dist>1, 0, 1))
df$left = as.factor(ifelse(2*x-y>0, 0, 1))
p1 = ggplot(df, aes(x=x, y=y, colour=left)) +
geom_point() +
geom_abline(slope = 2, intercept = 0, colour="blue") +
ggtitle("Classificació lineal")  +
theme_void() +
theme(legend.position="none")
p2 = ggplot(df, aes(x=x, y=y, colour=colour)) +
geom_point() +
annotate("path",
x=cos(seq(0,2*pi,length.out=100)),
y=sin(seq(0,2*pi,length.out=100)),
colour = "blue") +
ggtitle("Classificació no lineal") +
theme_void() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 4
liver = read.csv('indian_liver_patient.csv') #importo les dades
sample = sample(1:nrow(liver),50) # no vull totes les dades perquè el dibuix no queda bé, n'agafo algunes
liver$Albumin = liver$Albumin+runif(nrow(liver),min=-0.1, max=0.1) # aquí faig una mica de trampes perquè el dibuix quedi millor
mod = lm(Total_Protiens~Albumin, data = liver[sample, ])
preds = predict(mod)# construeixo un model lineal i predic els valors de y per poder dibuixar les ratlles verticals
ggplot(liver[sample, ], aes(x=Albumin, y=Total_Protiens, colour="orange")) +
geom_point() +
geom_smooth(method="lm", colour = "blue", se=FALSE) +
geom_segment(data=liver[sample, ],
aes( x = Albumin, xend = Albumin, y=preds,  yend = Total_Protiens),
colour = "black") +
theme_bw() +
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# Chunk 5
model1 = lm(Total_Protiens~Albumin, data = liver)
summary(model1)
# Chunk 6
#plot(liver)
#wilcox.test(liver$Aspartate_Aminotransferase~liver$Gender)
#wilcox.test(log10(liver$Aspartate_Aminotransferase)~liver$Gender)
mod1 = lm(liver$Alkaline_Phosphotase~liver$Alamine_Aminotransferase)
mod2 = lm(log10(liver$Alkaline_Phosphotase)~log10(liver$Alamine_Aminotransferase))
summary(mod1)
summary(mod2)
# Chunk 7
par(mfrow=c(1,2))
plot(log10(liver$Alkaline_Phosphotase)~log10(liver$Alamine_Aminotransferase))
plot(liver$Alkaline_Phosphotase~liver$Alamine_Aminotransferase)
df1 = as.data.frame(cbind(liver$Alkaline_Phosphotase,
liver$Alamine_Aminotransferase))
df2 = as.data.frame(cbind(log10(liver$Alkaline_Phosphotase),
log10(liver$Alamine_Aminotransferase)))
p1 = ggplot(df1, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Sense logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
p2 = ggplot(df2, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Amb logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 8
for (i in 3:7){
liver[,i] = log(liver[,i])
}
temp_liver = liver[,-c(4,10)]
# Chunk 9
model2 = lm(Total_Protiens~.-Dataset, data = temp_liver); summary(model2)
# Chunk 10
model3 = lm(Total_Protiens~.-Dataset, data = liver); summary(model3)
# Chunk 11
ci = confint(model2)
sum = summary(model2)
resum = as.data.frame(cbind(ci[,1], sum$coefficients[,1],
ci[,2],sum$coefficients[,4]))
resum = round(resum, 3)
colnames(resum) = c("IC-", "Coeficient", "IC+", "p-valor")
resum
# Chunk 12
ggplot(liver, aes(x=Aspartate_Aminotransferase, y=Total_Protiens)) +
geom_point( colour="orange") +
geom_smooth(method="lm", colour = "blue", se=TRUE) +
theme_bw() +
theme(legend.position="none")
# Chunk 13
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & log(liver$Alamine_Aminotransferase)<1.4)
samp = sample(quins, 135)
ggplot(liver[-samp,], aes(x = Alamine_Aminotransferase, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
# Chunk 14
ggplot(liver[-samp, ], aes(x = Alamine_Aminotransferase, y = Malaltia)) +
geom_point(colour="orange") +
geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
# Chunk 15
#liver$Malaltia = as.factor(liver$Malaltia)
#liver$Malaltia = as.numeric(as.character(liver$Malaltia))
liver$Malaltia = liver$Malaltia-1
ggplot(liver[-samp,], aes(x = Alamine_Aminotransferase, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
temp_liver = liver[,-c(4,10)]
model4 = glm(Malaltia~., data=temp_liver, family="binomial");summary(model4)
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
odd_r = exp(resum[3,1:1])
odd_r
odd_r = exp(resum[3,1:3])
odd_r
train = sample(nrow(liver), round(nrow(liver)/5*4,0))
test = -train
model_lineal = lm(Total_Protiens~.-Malaltia, data=liver[train,])
predict(model_lineal ,newdata = liver[test,], interval ="confidence")
df = as.data.frame(cbind(liver$Total_Protiens[tetst], preds))
df = as.data.frame(cbind(liver$Total_Protiens[test], preds))
View(df)
colnames(df) = c("Realitat", "Prediccions")
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm")
cors = cor.test(liver$Total_Protiens[test], preds)
length(liver$Total_Protiens[test])
length(preds)
preds
preds = predict(model_lineal ,newdata = liver[test,],
interval ="confidence")
dim(preds)
df = as.data.frame(cbind(liver$Total_Protiens[test], preds[1]))
colnames(df) = c("Realitat", "Prediccions")
cors = cor.test(liver$Total_Protiens[test], preds)
length(preds)
length(preds[1])
length(preds[,1])
df = as.data.frame(cbind(liver$Total_Protiens[test], preds[,1]))
colnames(df) = c("Realitat", "Prediccions")
cors = cor.test(liver$Total_Protiens[test], preds[,1])
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
ggtitle(cor.test())
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
ggtitle(title = cors$parameter, subtitle = cors$p.value)
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
labs(title = cors$parameter, subtitle = cors$p.value)
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
labs(title = paste0("r= ", cors$statistic),
subtitle = paste0("p= ", cors$p.value))
cors
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
labs(title = paste0("r= ", cors$estimate),
subtitle = paste0("p= ", cors$p.value))
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Comparació entre prediccions i realitat") +
annotate("text", x=4, y=8,
label=paste0("r= ", cors$estimate, "\n p= ", cors$p.value)) +
theme_bw
?annotate
ggplot(df, aes(Realitat,Prediccions )) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Comparació entre prediccions i realitat") +
annotate("text", x=4, y=8,
label=paste0("r= ", cors$estimate, "p= ", cors$p.value)) +
theme_bw
ggplot(df, aes(Realitat, Prediccions)) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Comparació entre prediccions i realitat") +
annotate("text", x=4, y=8,
label=paste0("r= ", cors$estimate, "\n p= ", cors$p.value))
ggplot(df, aes(Realitat, Prediccions)) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Comparació entre prediccions i realitat") +
annotate("text", x=4, y=8, label=paste0("r= ", round(cors$estimate,3),
"\n p= ", round(cors$p.value,3)))
model_log = lm(Malaltia~.-Malaltia, data=liver[train,])
preds = predict(model_log ,newdata = liver[test,], type = "response")
head(preds)
table(liver$Malaltia[test], preds)
preds = ifelse(probs>0.5,1,0)
probs = rep(0, length(test))
preds = ifelse(probs>0.5,1,0)
probs = predict(model_log ,newdata = liver[test,], type = "response")
preds = rep(0, length(test))
preds = probs>0.5
preds = ifelse(probs>0.5,1,0)
table(liver$Malaltia[test], preds)
table(liver$Malaltia[test], preds, dnn=c"Realitat", "Prediccions")
table(liver$Malaltia[test], preds, dnn=c("Realitat", "Prediccions"))
model_log = lm(Malaltia~., data=liver[train,])
probs = predict(model_log ,newdata = liver[test,], type = "response")
preds = rep(0, length(test))
preds = ifelse(probs>0.5,1,0)
tt = table(liver$Malaltia[test], preds, dnn=c("Realitat", "Prediccions"))
print("La matriu de confusió és:")
print(tt)
encert = (tt[1]+tt[4])/sum(tt)
print(paste0("El percentatge d'encert és ", encert))
?roc
rocplot(probs ,liver$Malaltia[test], main="Corba ROC")
require(ROCR)
rocplot(probs ,liver$Malaltia[test], main="Corba ROC")
roc(probs ,liver$Malaltia[test])
require(pROC)
roc(probs ,liver$Malaltia[test])
?roc
require(pROC)
roc(probs ,liver$Malaltia[test])
roc(liver$Malaltia[test],probs)
require(gplots)
roc(liver$Malaltia[test],probs)
install.packages("gplots")
install.packages("gplots")
require(pROC)
require(gplots)
roc(liver$Malaltia[test],probs)
ROC(liver$Malaltia[test],probs)
require(verification)
roc.plot(liver$Malaltia[test],probs)
"roc.plot"(liver$Malaltia[test],probs)
?verification
source('corbes_roc.R')
preroc = as.data.frame(cbind(liver$Malaltia[test],probs))
head(preroc)
preroc[,1]=as.factor(preroc[,1])
colnames(preroc)=c('survived', 'pred')
head(preroc)
probs
probs = predict(model_log ,newdata = liver[test,], type = "response")
probs
model_log = glm(Malaltia~., data=liver[train,], family = "binomial")
probs = predict(model_log ,newdata = liver[test,], type = "response")
probs
preds = rep(0, length(test))
preds = ifelse(probs>0.5,1,0)
tt = table(liver$Malaltia[test], preds,
dnn=c("Realitat", "Prediccions"))
tt
print(paste0("I la ràtio d'encert és ", (tt[1]+tt[4])/sum(tt)))
preroc = as.data.frame(cbind(liver$Malaltia[test],probs))
preroc[,1]=as.factor(preroc[,1])
colnames(preroc)=c('survived', 'pred')
roc4=calculate_roc(preroc, 1, 1, n = 100)
plot_roc(roc4, 0.5, 1, 1)
require(ggplot2)
plot_roc(roc4, 0.5, 1, 1)
roc4=calculate_roc(preroc, 1, 1, n = 100)
preroc
preroc = preroc[complete.cases(preroc),]
roc=calculate_roc(preroc, 1, 1, n = 100)
plot_roc(roc, 0.5, 1, 1)
plot_pred_type_distribution(preroc, 0.5)
require(cvAUC)
ci.cvAUC(preroc$pred,preroc$survived)
par(mfrow=c(1,2))
n=100
x = seq(0, 100,length=n)
y = x+rnorm(n, 0, 40)
z = 10*sin(x/10)+x+rnorm(n, 0, 4)
m=10
a = seq(0, 100,length=m)
b = 10*sin(10*a)+a
data = as.data.frame(cbind(x, y, z))
ggplot(data, aes(x, y))+geom_point()
ggplot(data, aes(x, z))+geom_point()
m=10
a = runif(10,0,100)
b = 10*sin(10*a)+a
t = 100000
u = a = runif(t,0,100)
v = 10*sin(10*u)+u
data = as.data.frame(cbind(a,b))
ggplot(data, aes(a, b))+geom_point()
a = runif(10,0,100)
b = 10*sin(10*a)+a
t = 100000
u = runif(t,0,100)
v = 10*sin(10*u)+u
data = as.data.frame(cbind(a,b))
ggplot(data, aes(a, b))+geom_point()
require(mgcv)
ggplot(data, aes(a, b)) +
geom_point() +
geom_point(aes(t, u))
ggplot(data, aes(a, b)) +
geom_point()
ggplot(data, aes(a, b)) +
geom_point() +
geom_point(data = data2, mapping = aes(u, v), colour = "blue")
data2 = as.data.frame(cbind(u,v))
ggplot(data, aes(a, b)) +
geom_point() +
geom_point(data = data2, mapping = aes(u, v), colour = "blue")
?geom_line
t = 1000
u = runif(t,0,100)
v = 10*sin(10*u)+u
data2 = as.data.frame(cbind(u,v))
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue")
ggplot(data, aes(a, b)) +
geom_point() +
geom_point(data = data2, mapping = aes(u, v), colour = "blue")
u = seq(t,0,100)
u = seq(length=t,0,100)
v = 10*sin(10*u)+u
data2 = as.data.frame(cbind(u,v))
ggplot(data, aes(a, b)) +
geom_point() +
geom_point(data = data2, mapping = aes(u, v), colour = "blue")
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue")
a = runif(10,0,100)
b = 10*sin(a)+a
u = seq(length=t,0,100)
v = 10*sin(u)+u
data = as.data.frame(cbind(a,b))
ggplot(data, aes(a, b))+geom_point()
data2 = as.data.frame(cbind(u,v))
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue")
m=20
a = runif(m,0,100)
b = 10*sin(a)+a
t = 1000
u = seq(length=t,0,100)
v = 10*sin(u)+u
data = as.data.frame(cbind(a,b))
data2 = as.data.frame(cbind(u,v))
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue")
ggplot(data, aes(a, b))+geom_point()
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue")
set.seed(1)
m=20
a = runif(m,0,100)
b = 10*sin(a)+a
t = 1000
u = seq(length=t,0,100)
v = 10*sin(u)+u
data = as.data.frame(cbind(a,b))
ggplot(data, aes(a, b))+geom_point()
data2 = as.data.frame(cbind(u,v))
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue")
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue") +
annotate("text", label = "y=10*sin(x)+x", x=25, y=90)
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue") +
annotate("text", label = "y=10*sin(x)+x", x=25, y=90, size=2)
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue") +
annotate("text", label = "y=10*sin(x)+x", x=25, y=90, size=10)
ggplot(data, aes(a, b)) +
geom_point() +
geom_path(data = data2, mapping = aes(u, v), colour = "blue") +
annotate("text", label = "y=10*sin(x)+x", x=25, y=90, size=6)
