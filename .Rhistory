ggtitle("Classificació no lineal") +
theme_void() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 4
liver = read.csv('input/indian_liver_patient.csv') #importo les dades
sample = sample(1:nrow(liver),50) # no vull totes les dades perquè el dibuix no queda bé, n'agafo algunes
liver$Albumin = liver$Albumin+runif(nrow(liver),min=-0.1, max=0.1) # aquí faig una mica de trampes perquè el dibuix quedi millor
mod = lm(Total_Protiens~Albumin, data = liver[sample, ])
preds = predict(mod)# construeixo un model lineal i predic els valors de y per poder dibuixar les ratlles verticals
ggplot(liver[sample, ], aes(x=Albumin, y=Total_Protiens, colour="orange")) +
geom_point() +
geom_smooth(method="lm", colour = "blue", se=FALSE) +
geom_segment(data=liver[sample, ],
aes( x = Albumin, xend = Albumin, y=preds,  yend = Total_Protiens),
colour = "black") +
theme_bw() +
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# Chunk 5
model1 = lm(Total_Protiens~Albumin, data = liver)
summary(model1)
# Chunk 6
#plot(liver)
#wilcox.test(liver$Aspartate_Aminotransferase~liver$Gender)
#wilcox.test(log10(liver$Aspartate_Aminotransferase)~liver$Gender)
mod1 = lm(liver$Alkaline_Phosphotase~liver$Alamine_Aminotransferase)
mod2 = lm(log10(liver$Alkaline_Phosphotase)~log10(liver$Alamine_Aminotransferase))
summary(mod1)
summary(mod2)
# Chunk 7
df1 = as.data.frame(cbind(liver$Alkaline_Phosphotase,
liver$Alamine_Aminotransferase))
df2 = as.data.frame(cbind(log10(liver$Alkaline_Phosphotase),
log10(liver$Alamine_Aminotransferase)))
p1 = ggplot(df1, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Sense logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
p2 = ggplot(df2, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Amb logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 8
for (i in 3:7){
liver[,i] = log(liver[,i])
}
temp_liver = liver[,-c(4,10)]
# Chunk 9
model2 = lm(Total_Protiens~.-Dataset, data = temp_liver); summary(model2)
# Chunk 10
model3 = lm(Total_Protiens~.-Dataset, data = liver); summary(model3)
# Chunk 11
ci = confint(model2)
sum = summary(model2)
resum = as.data.frame(cbind(ci[,1], sum$coefficients[,1],
ci[,2],sum$coefficients[,4]))
resum = round(resum, 3)
colnames(resum) = c("IC-", "Coeficient", "IC+", "p-valor")
resum
# Chunk 12
ggplot(liver, aes(x=Aspartate_Aminotransferase, y=Total_Protiens)) +
geom_point( colour="orange") +
geom_smooth(method="lm", colour = "blue", se=TRUE) +
theme_bw() +
theme(legend.position="none")
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & liver$Total_Bilirubin<1)
samp = sample(quins, 135)
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw()
liver$Malaltia[samp] =2
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw()
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
set.seed(2502)
require(ggplot2)
require(gridExtra)
# Chunk 2
a = seq(length=100, from=-10, to=10)
b = a + rnorm(100)
c = 5*a + -8*a^2 + a^3  + 40*rnorm(100)
par(mfrow=c(1,2)) # això serveix per poder tenir dues imatges costat per costat
plot(a,b, main = "Model regressió lineal")
plot(a, c, main = "Model regressió no lineal")
# Chunk 3
x = rnorm(100)
y = rnorm(100)
df = as.data.frame(cbind(x,y))
df$dist = x^2+y^2
df$colour = as.factor(ifelse(df$dist>1, 0, 1))
df$left = as.factor(ifelse(2*x-y>0, 0, 1))
p1 = ggplot(df, aes(x=x, y=y, colour=left)) +
geom_point() +
geom_abline(slope = 2, intercept = 0, colour="blue") +
ggtitle("Classificació lineal")  +
theme_void() +
theme(legend.position="none")
p2 = ggplot(df, aes(x=x, y=y, colour=colour)) +
geom_point() +
annotate("path",
x=cos(seq(0,2*pi,length.out=100)),
y=sin(seq(0,2*pi,length.out=100)),
colour = "blue") +
ggtitle("Classificació no lineal") +
theme_void() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 4
liver = read.csv('input/indian_liver_patient.csv') #importo les dades
sample = sample(1:nrow(liver),50) # no vull totes les dades perquè el dibuix no queda bé, n'agafo algunes
liver$Albumin = liver$Albumin+runif(nrow(liver),min=-0.1, max=0.1) # aquí faig una mica de trampes perquè el dibuix quedi millor
mod = lm(Total_Protiens~Albumin, data = liver[sample, ])
preds = predict(mod)# construeixo un model lineal i predic els valors de y per poder dibuixar les ratlles verticals
ggplot(liver[sample, ], aes(x=Albumin, y=Total_Protiens, colour="orange")) +
geom_point() +
geom_smooth(method="lm", colour = "blue", se=FALSE) +
geom_segment(data=liver[sample, ],
aes( x = Albumin, xend = Albumin, y=preds,  yend = Total_Protiens),
colour = "black") +
theme_bw() +
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# Chunk 5
model1 = lm(Total_Protiens~Albumin, data = liver)
summary(model1)
# Chunk 6
#plot(liver)
#wilcox.test(liver$Aspartate_Aminotransferase~liver$Gender)
#wilcox.test(log10(liver$Aspartate_Aminotransferase)~liver$Gender)
mod1 = lm(liver$Alkaline_Phosphotase~liver$Alamine_Aminotransferase)
mod2 = lm(log10(liver$Alkaline_Phosphotase)~log10(liver$Alamine_Aminotransferase))
summary(mod1)
summary(mod2)
# Chunk 7
df1 = as.data.frame(cbind(liver$Alkaline_Phosphotase,
liver$Alamine_Aminotransferase))
df2 = as.data.frame(cbind(log10(liver$Alkaline_Phosphotase),
log10(liver$Alamine_Aminotransferase)))
p1 = ggplot(df1, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Sense logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
p2 = ggplot(df2, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Amb logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 8
for (i in 3:7){
liver[,i] = log(liver[,i])
}
temp_liver = liver[,-c(4,10)]
# Chunk 9
model2 = lm(Total_Protiens~.-Dataset, data = temp_liver); summary(model2)
# Chunk 10
model3 = lm(Total_Protiens~.-Dataset, data = liver); summary(model3)
# Chunk 11
ci = confint(model2)
sum = summary(model2)
resum = as.data.frame(cbind(ci[,1], sum$coefficients[,1],
ci[,2],sum$coefficients[,4]))
resum = round(resum, 3)
colnames(resum) = c("IC-", "Coeficient", "IC+", "p-valor")
resum
# Chunk 12
ggplot(liver, aes(x=Aspartate_Aminotransferase, y=Total_Protiens)) +
geom_point( colour="orange") +
geom_smooth(method="lm", colour = "blue", se=TRUE) +
theme_bw() +
theme(legend.position="none")
# Chunk 13
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & liver$Total_Bilirubin<1)
samp = sample(quins, 135)
liver$Malaltia[samp] =2
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw()
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & liver$Total_Bilirubin<1)
samp = sample(quins, 135)
liver$Malaltia[samp] =2
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & liver$Total_Bilirubin<1.1)
samp = sample(quins, 135)
liver$Malaltia[samp] =2
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & liver$Total_Bilirubin<1.2)
samp = sample(quins, 135)
liver$Malaltia[samp] =2
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
ggplot(liver[-samp, ], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
#liver$Malaltia = as.factor(liver$Malaltia)
#liver$Malaltia = as.numeric(as.character(liver$Malaltia))
liver$Malaltia = liver$Malaltia-1
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
xlim(-3,5) +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
geom_smooth(method = "glm", method.args = list(family = "binomial"))
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw()
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))+
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt")) +
```
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))+
scale_y_discrete(limits=c("0", "1"),
labels = c("0" = "Sa", "1" = "Malalt"))
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))+
scale_y_discrete(limits=c(0, 1),
labels = c(0 = "Sa", 1 = "Malalt"))
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))+
scale_y_discrete(limits=c(0, 1),
labels = c("0" = "Sa", "1" = "Malalt"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
set.seed(2502)
require(ggplot2)
require(gridExtra)
# Chunk 2
a = seq(length=100, from=-10, to=10)
b = a + rnorm(100)
c = 5*a + -8*a^2 + a^3  + 40*rnorm(100)
par(mfrow=c(1,2)) # això serveix per poder tenir dues imatges costat per costat
plot(a,b, main = "Model regressió lineal")
plot(a, c, main = "Model regressió no lineal")
# Chunk 3
x = rnorm(100)
y = rnorm(100)
df = as.data.frame(cbind(x,y))
df$dist = x^2+y^2
df$colour = as.factor(ifelse(df$dist>1, 0, 1))
df$left = as.factor(ifelse(2*x-y>0, 0, 1))
p1 = ggplot(df, aes(x=x, y=y, colour=left)) +
geom_point() +
geom_abline(slope = 2, intercept = 0, colour="blue") +
ggtitle("Classificació lineal")  +
theme_void() +
theme(legend.position="none")
p2 = ggplot(df, aes(x=x, y=y, colour=colour)) +
geom_point() +
annotate("path",
x=cos(seq(0,2*pi,length.out=100)),
y=sin(seq(0,2*pi,length.out=100)),
colour = "blue") +
ggtitle("Classificació no lineal") +
theme_void() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 4
liver = read.csv('input/indian_liver_patient.csv') #importo les dades
sample = sample(1:nrow(liver),50) # no vull totes les dades perquè el dibuix no queda bé, n'agafo algunes
liver$Albumin = liver$Albumin+runif(nrow(liver),min=-0.1, max=0.1) # aquí faig una mica de trampes perquè el dibuix quedi millor
mod = lm(Total_Protiens~Albumin, data = liver[sample, ])
preds = predict(mod)# construeixo un model lineal i predic els valors de y per poder dibuixar les ratlles verticals
ggplot(liver[sample, ], aes(x=Albumin, y=Total_Protiens, colour="orange")) +
geom_point() +
geom_smooth(method="lm", colour = "blue", se=FALSE) +
geom_segment(data=liver[sample, ],
aes( x = Albumin, xend = Albumin, y=preds,  yend = Total_Protiens),
colour = "black") +
theme_bw() +
theme(legend.position="none",
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# Chunk 5
model1 = lm(Total_Protiens~Albumin, data = liver)
summary(model1)
# Chunk 6
#plot(liver)
#wilcox.test(liver$Aspartate_Aminotransferase~liver$Gender)
#wilcox.test(log10(liver$Aspartate_Aminotransferase)~liver$Gender)
mod1 = lm(liver$Alkaline_Phosphotase~liver$Alamine_Aminotransferase)
mod2 = lm(log10(liver$Alkaline_Phosphotase)~log10(liver$Alamine_Aminotransferase))
summary(mod1)
summary(mod2)
# Chunk 7
df1 = as.data.frame(cbind(liver$Alkaline_Phosphotase,
liver$Alamine_Aminotransferase))
df2 = as.data.frame(cbind(log10(liver$Alkaline_Phosphotase),
log10(liver$Alamine_Aminotransferase)))
p1 = ggplot(df1, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Sense logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
p2 = ggplot(df2, aes(x=V1, y=V2)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
ggtitle("Amb logaritme")  +
xlab("Alkaline Phosphotase") +
ylab("Alamine Aminotransferase") +
theme_bw() +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
# Chunk 8
for (i in 3:7){
liver[,i] = log(liver[,i])
}
temp_liver = liver[,-c(4,10)]
# Chunk 9
model2 = lm(Total_Protiens~.-Dataset, data = temp_liver); summary(model2)
# Chunk 10
model3 = lm(Total_Protiens~.-Dataset, data = liver); summary(model3)
# Chunk 11
ci = confint(model2)
sum = summary(model2)
resum = as.data.frame(cbind(ci[,1], sum$coefficients[,1],
ci[,2],sum$coefficients[,4]))
resum = round(resum, 3)
colnames(resum) = c("IC-", "Coeficient", "IC+", "p-valor")
resum
# Chunk 12
ggplot(liver, aes(x=Aspartate_Aminotransferase, y=Total_Protiens)) +
geom_point( colour="orange") +
geom_smooth(method="lm", colour = "blue", se=TRUE) +
theme_bw() +
theme(legend.position="none")
# Chunk 13
#liver$Dataset = as.factor(liver$Dataset)
colnames(liver)[ncol(liver)] = "Malaltia"
#levels(liver$Malaltia) <- c("Sa","Malalt")
quins = which(liver$Malaltia==1 & liver$Total_Bilirubin<1.2)
samp = sample(quins, 135)
liver$Malaltia[samp] =2
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
#  geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
# Chunk 14
ggplot(liver[-samp, ], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
geom_smooth(method="lm") +
theme_bw() +
scale_y_discrete(limits=c("1.0", "2.0"),
labels = c("1.0" = "Sa", "2.0" = "Malalt"))
#liver$Malaltia = as.factor(liver$Malaltia)
#liver$Malaltia = as.numeric(as.character(liver$Malaltia))
liver$Malaltia = liver$Malaltia-1
ggplot(liver[-samp,], aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))+
scale_y_discrete(limits=c(0, 1),
labels = c("0" = "Sa", "1" = "Malalt"))
ggplot(liver, aes(x = Total_Bilirubin, y = Malaltia)) +
geom_point(colour="orange") +
theme_bw() +
geom_smooth(method = "glm", method.args = list(family = "binomial"))+
scale_y_discrete(limits=c(0, 1),
labels = c("0" = "Sa", "1" = "Malalt"))
length(quins)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE)
require(ggplot2)
require(leaps)
set.seed(1)
# Chunk 2
n=100
x = seq(1, 101,length=n)
y = log(x)+rnorm(n)
z = 10*sin(x/10)+x+rnorm(n, 0, 4)
data = as.data.frame(cbind(x, y, z))
# Chunk 3
model_lineal = lm(data=data, y~x)
summary(model_lineal)
# Chunk 4
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Model lineal") +
annotate("text", label = "R^2 == 0.32",parse = TRUE, x=75, y=0, size=6)
# Chunk 5
model_log = lm(data=data, y~log(x))
summary(model_log)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE)
require(ggplot2)
require(leaps)
set.seed(1)
# Chunk 2
n=100
x = seq(1, 101,length=n)
y = log(x)+rnorm(n)
z = 10*sin(x/10)+x+rnorm(n, 0, 4)
data = as.data.frame(cbind(x, y, z))
# Chunk 3
model_lineal = lm(data=data, y~x)
summary(model_lineal)
# Chunk 4
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Model lineal") +
annotate("text", label = "R^2 == 0.32",parse = TRUE, x=75, y=0, size=6)
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method="lm") +
labs(title = "Model lineal") +
theme_bw() +
annotate("text", label = "R^2 == 0.32",parse = TRUE, x=75, y=0, size=6)
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", formula = y~log(x)) +
labs(title = "Model logarítmic") +
theme_bw() +
annotate("text", label = "R^2 == 0.51",parse = TRUE, x=75, y=0, size=6)
install.packages("httpuv ")
install.packages("httpuv")
install.packages("catools")
install.packages("catTools")
install.packages("caTools")
install.packages("caTools")
